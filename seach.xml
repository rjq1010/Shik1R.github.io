<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于双拼]]></title>
    <url>%2F2018%2F04%2F03%2F%E5%85%B3%E4%BA%8E%E5%8F%8C%E6%8B%BC%2F</url>
    <content type="text"><![CDATA[有段时间一直在想着双拼、全拼、五笔的一些问题，此文为看到《数学之美》第21章“拼音输入法的数学原理”后有感所写。 以前是不知道双拼这个东西的，偶然从知乎了解之后，觉得可以尝试一下，便选取了好评很多的小鹤双拼，直到今天也两年了。如果有兴趣，希望各位也能了解一下双拼输入，我认为是最少的成本花费下最高效的输入方式。 输入速率是一个击键次数与重码率的问题，从《数学之美》中了解到其本质上是一个信息论的问题，击键次数是可以通过香农的第一理论计算出来的。而重码率的问题是可以通过数学模型来解决的。文中提到拼音输入法早期甚至是双拼早于全拼的，中间流行了五笔，最后还是回到了全拼，并提到了双拼关于重码率，击键时间，容错率的问题。 击键时间《数学之美》中提到双拼的输入方式不自然，拆声母韵母的时候会存在思维变慢。但我对这些并不认同，双拼的思维方式是完全没有改变的，这一点不同于拆字类型的输入方式，只要两三个月对于新键位的熟悉，在输入的时候是完全没有任何影响的。 重码率重码率的问题本身是存在，但是对于现在主流的输入法这一点的劣势是的消除了的。语音模型的改进，上下文相关的分析使得重码的问题基本是不存在的（我使用的时候是没有过重码的问题的）。印象最深刻的重码问题就是当开启了“双拼下使用全拼”，即自动识别双拼全拼，输入xian会出现“先”，然而纯双拼是直接显示“西安”的。当然，这其实是全拼的重码问题。 容错率容错率的问题是我第一次意识到的，即对于前鼻音和后鼻音分辨不清的时候的问题，如果一个人对于前后鼻音不能快速有效的识别的话，双拼上是会存在问题的（当然全拼也是存在的），但全拼的输入方式使得一部分的错误能掩盖掉，双拼就只能以正确的形式输入。这个问题其实并不是输入法的问题，性质上和手指键位是否标准，击键次数最快多少等主关因素是相同的，但也不可否认这样的问题。 感言智能输入法的出现使得全拼的重码率变低，普通输入速率大幅上升，但这对于双拼也是一样的，甚至影响更大。 字词平台输入法其实是有历史局限性的，理论上很好，上限高。但是是跟不上时代的东西，除非专业人员，并不十分推荐使用，但学习量不大的如“小鹤双形”在一些场合却也十分适用，能掌握基本使用方法也是很好的。 日常输入速度在达到一个量的时候（如100字/min），更多的影响其实是思考的速度，而非打字的速度，打字终究还是要自己习惯，自己舒适就行，越是追求着一种极致，最后反而可能在一些方面违背了初心，那样也就不好了。]]></content>
      <tags>
        <tag>独り言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建记录]]></title>
    <url>%2F2018%2F04%2F03%2FHexo%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[An Archive of Using Hexo with GitHub. GitHub Repository 创建名为name.github.io的repository 启用GitHub Pages，会显示相应网页地址。 Hexo本地部署 Reuqire Node.js git Windows下以下操作建议在git bash中完成。、 由于众所周知的原因，npm需要换源,不然速度奇慢 12npm config set registry https://registry.npm.taobao.orgnpm config get registry 安装hexo$ npm install -g hexo-cli 检查安装是否成功hexo -v 新建一个Blog目录，如D:/Blog,在这里初始化hexo,成功时会显示“Start blogging with Hexo”hexo init 体验Hexonpm install &lt;br&gt;hexo g Hexo本地服务器,地址localhost:4000,可作为测试使用hexo s Git与Hexo连接（同步推送） 设置Git usrname和email 12git config --global user.name "`YourName`"git config --global user.email "`YourEmail`" 生成秘钥 秘钥存储在.ssh文件下cd ./.ssh 生成ssh秘钥 1ssh-keygen -t rsa -C &quot;`YourEmail`&quot; 把秘钥添加到ssh-agent 1eval &quot;$(ssh-agent -s)&quot; 生成的ssh key 添加到ssh-agentssh-add ./.ssh/id_rsa GitHub -&gt; setting -&gt; SSH and GPGkeys 添加key. 测试是否成功ssh -T git@github.com _config.yml修改 1234deploy: type: git repo: git@github.com:gdutxiaoxu/gdutxiaoxu.github.io.git branch: master 插件1. 坑]]></content>
      <tags>
        <tag>Archive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F04%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
